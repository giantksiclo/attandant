/*
  # Hospital Attendance System Schema

  1. New Tables
    - `profiles`
      - Extended user information
      - Linked to auth.users
      - Stores role (admin/staff)
      - Stores department info
    
    - `attendance_records`
      - Stores check-in/out and overtime records
      - Links to user profiles
      - Includes location and QR info
      
  2. Security
    - Enable RLS on all tables
    - Add policies for user data access
    - Admin can access all records
    - Staff can only access their own records
*/

-- Create profiles table
CREATE TABLE public.profiles (
  id uuid PRIMARY KEY REFERENCES auth.users(id),
  name text,
  role text DEFAULT 'staff',
  department text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create attendance records table
CREATE TABLE public.attendance_records (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) NOT NULL,
  record_type text NOT NULL CHECK (record_type IN ('check_in', 'check_out', 'overtime_start', 'overtime_end')),
  location text NOT NULL,
  qr_code text NOT NULL,
  timestamp timestamptz DEFAULT now(),
  notes text
);

-- Enable RLS
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.attendance_records ENABLE ROW LEVEL SECURITY;

-- Policies for profiles
CREATE POLICY "Users can view own profile"
  ON public.profiles
  FOR SELECT
  TO authenticated
  USING (auth.uid() = id);

CREATE POLICY "Users can update own profile"
  ON public.profiles
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = id);

CREATE POLICY "Admins can view all profiles"
  ON public.profiles
  FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.profiles
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- Policies for attendance records
CREATE POLICY "Users can view own attendance records"
  ON public.attendance_records
  FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can insert own attendance records"
  ON public.attendance_records
  FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Admins can view all attendance records"
  ON public.attendance_records
  FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.profiles
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- 익명 사용자가 회원가입 시 profiles 테이블에 insert 할 수 있도록 허용
CREATE POLICY "Public profiles are viewable by everyone."
  ON profiles FOR SELECT
  TO anon
  USING (true);

-- profiles 테이블에 대한 추가 정책
CREATE POLICY "Authenticated users can insert their own profile."
  ON profiles FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = id);

-- 익명 사용자에게 프로필 삽입 권한 명시적 추가
CREATE POLICY "Anonymous users can insert profiles"
  ON profiles FOR INSERT
  TO anon
  WITH CHECK (true);

-- 실제 존재하는 사용자 목록 조회
SELECT id, email FROM auth.users;

-- 사용자 생성 시 프로필 자동 생성 트리거
CREATE OR REPLACE FUNCTION public.create_profile_for_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, name, role, department)
  VALUES (
    NEW.id, 
    COALESCE(NEW.raw_user_meta_data->>'name', SPLIT_PART(NEW.email, '@', 1)), 
    'staff',
    COALESCE(NEW.raw_user_meta_data->>'department', '미지정')
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE TRIGGER create_profile_trigger
AFTER INSERT ON auth.users
FOR EACH ROW EXECUTE FUNCTION public.create_profile_for_user();